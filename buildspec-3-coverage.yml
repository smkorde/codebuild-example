version: 0.2
env:
  parameter-store:
    SONARQUBE_TOKEN: "SONARQUBE_TOKEN"
    SONARQUBE_ENDPOINT: "SONARQUBE_ENDPOINT"
    AWS_DEFAULT_REGION: "DEFAULT_REGION"
    IMAGE_REPO_NAME: "IMAGE_REPO_NAME"
    IMAGE_TAG: "IMAGE_TAG"
    AWS_ACCOUNT_ID: "ACCOUNT_ID"
phases:

 install:
   commands:
     #- wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
     #- unzip sonar-scanner-cli-3.3.0.1492-linux.zip
     #- export PATH=$PATH:./sonar-scanner-3.3.0.1492-linux/bin/
     #- echo $PATH
          #This file configures apt to remove it's cache after installs - we want this cache, so we remove this config
     - rm -f /etc/apt/apt.conf.d/docker-clean

     #Install required packages
     - |
         export DEBIAN_FRONTEND=noninteractive
         #Install php7.1
         apt-get update
         apt-get install -y  software-properties-common
         LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
         apt-get update
         apt-get install docker
         apt-get install awscli
         # Install PHP 7.1.  The ondrej/php repository also contains other versions of php, try just changing the version number
         apt-get install -y php7.1\
                  php7.1-ldap \
                  php7.1-xml \
                  php7.1-xmlrpc \
                  php7.1-zip \
                  php7.1-mysql \
                  php7.1-mbstring \
                  php7.1-mcrypt \
                  php7.1-gd \
                  php7.1-readline \
                  php7.1-opcache \
                  php7.1-phpdbg \
                  php7.1-dom \
                  #php-xdebug \
                  php7.1-curl \
                  unzip

         #Install composer
         php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
         php composer-setup.php ;
         php -r "unlink('composer-setup.php');" ;
         mv composer.phar /usr/local/bin/composer
         
 
 #pre_build:
  #  commands:
   #   - echo Logging in to Amazon ECR...
     # - aws ecr get-login --no-include-email --region $DEFAULT_REGION        
 
 build:
   commands:
     - echo Build started on `date`
     - echo Installing composer deps
     - composer install
     - composer require --dev phpstan/phpstan
     - echo Building the Docker image...          
     - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
     - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG  
 post_build:
   commands:
     - echo Build completed on `date`
     # Run your tests
     #- phpdbg -qrr ./vendor/bin/phpunit -c phpunit.xml
     #- ./vendor/bin/phpstan analyse app --level 5 --error-format=junit --no-progress > ci/quality_check.xml
     #- aws s3 sync --delete  coverage/ "s3://codebuild-example-coverage-report/coverage"
     #- sonar-scanner
     - aws ecr get-login --region $AWS_DEFAULT_REGION
     #- docker login -u AWS -p <password> <aws_account_id>.dkr.ecr.<region>.amazonaws.com
     - echo Pushing the Docker image...
     - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#reports: #New
 #UnitTestReports: # CodeBuild will create a report group called "SurefireReports".
  # files: #Store all of the files
   #  - '**/*'
   #base-directory: 'ci/' # Location of the reports  
cache:
  paths:
    # Debian package caches, so we don't need to keep redownloading debian packages:
    - /var/cache/apt/**/*
    - /var/lib/apt/lists/**/*

    # Composer cache:
    - /root/.composer/**/*

    # Node modules, if you need nodejs based tools like webpack during your build
    - /root/.npm/**/*
    - /usr/lib/node_modules/**/*
