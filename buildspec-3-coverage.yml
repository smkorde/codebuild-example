version: 0.2
env:
  parameter-store:
    SONARQUBE_TOKEN: "SONARQUBE_TOKEN"
    SONARQUBE_ENDPOINT: "SONARQUBE_ENDPOINT"
phases:

 install:
   commands:
     - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
     - unzip sonar-scanner-cli-4.4.0.2170-linux.zip
     - export PATH=$PATH:sonar-scanner-cli-4.4.0.2170-linux/bin/
     - echo $PATH
 build:
   commands:
     - echo Build started on `date`
     - echo Running sonar scanner
     - sonar-scanner
     - echo Installing composer deps
     - composer install --no-progress --no-suggest

 post_build:
   commands:
     - echo Build completed on `date`

     # Create a mysql database
     # Do you need to do this? In many cases phpunit will use sqllite or similar to avoid the need for a real DB.
     # If you don't need it delete it
     # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
     # - mysqladmin -u test create test

     # Run your tests
     - ./vendor/bin/phpunit --coverage-html coverage

     - aws s3 sync --delete  coverage/ "s3://codebuild-example-coverage-report/coverage"


cache:
  paths:
    # Debian package caches, so we don't need to keep redownloading debian packages:
    - /var/cache/apt/**/*
    - /var/lib/apt/lists/**/*

    # Composer cache:
    - /root/.composer/**/*

    # Node modules, if you need nodejs based tools like webpack during your build
    - /root/.npm/**/*
    - /usr/lib/node_modules/**/*
